// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: access.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AccessDefinition with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AccessDefinition) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AccessDefinition with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AccessDefinitionMultiError, or nil if none found.
func (m *AccessDefinition) ValidateAll() error {
	return m.validate(true)
}

func (m *AccessDefinition) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Group

	// no validation rules for Domain

	if len(errors) > 0 {
		return AccessDefinitionMultiError(errors)
	}

	return nil
}

// AccessDefinitionMultiError is an error wrapping multiple validation errors
// returned by AccessDefinition.ValidateAll() if the designated constraints
// aren't met.
type AccessDefinitionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AccessDefinitionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AccessDefinitionMultiError) AllErrors() []error { return m }

// AccessDefinitionValidationError is the validation error returned by
// AccessDefinition.Validate if the designated constraints aren't met.
type AccessDefinitionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessDefinitionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessDefinitionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessDefinitionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessDefinitionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessDefinitionValidationError) ErrorName() string { return "AccessDefinitionValidationError" }

// Error satisfies the builtin error interface
func (e AccessDefinitionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessDefinition.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessDefinitionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessDefinitionValidationError{}

// Validate checks the field values on GrantAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantAccessRequestMultiError, or nil if none found.
func (m *GrantAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantAccessRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantAccessRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantAccessRequestValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantAccessRequestMultiError(errors)
	}

	return nil
}

// GrantAccessRequestMultiError is an error wrapping multiple validation errors
// returned by GrantAccessRequest.ValidateAll() if the designated constraints
// aren't met.
type GrantAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantAccessRequestMultiError) AllErrors() []error { return m }

// GrantAccessRequestValidationError is the validation error returned by
// GrantAccessRequest.Validate if the designated constraints aren't met.
type GrantAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantAccessRequestValidationError) ErrorName() string {
	return "GrantAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantAccessRequestValidationError{}

// Validate checks the field values on GrantAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GrantAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantAccessResponseMultiError, or nil if none found.
func (m *GrantAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return GrantAccessResponseMultiError(errors)
	}

	return nil
}

// GrantAccessResponseMultiError is an error wrapping multiple validation
// errors returned by GrantAccessResponse.ValidateAll() if the designated
// constraints aren't met.
type GrantAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantAccessResponseMultiError) AllErrors() []error { return m }

// GrantAccessResponseValidationError is the validation error returned by
// GrantAccessResponse.Validate if the designated constraints aren't met.
type GrantAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantAccessResponseValidationError) ErrorName() string {
	return "GrantAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GrantAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantAccessResponseValidationError{}

// Validate checks the field values on RevokeAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeAccessRequestMultiError, or nil if none found.
func (m *RevokeAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDefinition()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RevokeAccessRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RevokeAccessRequestValidationError{
					field:  "Definition",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDefinition()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevokeAccessRequestValidationError{
				field:  "Definition",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RevokeAccessRequestMultiError(errors)
	}

	return nil
}

// RevokeAccessRequestMultiError is an error wrapping multiple validation
// errors returned by RevokeAccessRequest.ValidateAll() if the designated
// constraints aren't met.
type RevokeAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeAccessRequestMultiError) AllErrors() []error { return m }

// RevokeAccessRequestValidationError is the validation error returned by
// RevokeAccessRequest.Validate if the designated constraints aren't met.
type RevokeAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAccessRequestValidationError) ErrorName() string {
	return "RevokeAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAccessRequestValidationError{}

// Validate checks the field values on RevokeAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeAccessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeAccessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RevokeAccessResponseMultiError, or nil if none found.
func (m *RevokeAccessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeAccessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return RevokeAccessResponseMultiError(errors)
	}

	return nil
}

// RevokeAccessResponseMultiError is an error wrapping multiple validation
// errors returned by RevokeAccessResponse.ValidateAll() if the designated
// constraints aren't met.
type RevokeAccessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeAccessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeAccessResponseMultiError) AllErrors() []error { return m }

// RevokeAccessResponseValidationError is the validation error returned by
// RevokeAccessResponse.Validate if the designated constraints aren't met.
type RevokeAccessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAccessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAccessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAccessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAccessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAccessResponseValidationError) ErrorName() string {
	return "RevokeAccessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAccessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAccessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAccessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAccessResponseValidationError{}

// Validate checks the field values on ShowAccessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ShowAccessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShowAccessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShowAccessRequestMultiError, or nil if none found.
func (m *ShowAccessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShowAccessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Subject

	// no validation rules for Group

	// no validation rules for Domain

	if len(errors) > 0 {
		return ShowAccessRequestMultiError(errors)
	}

	return nil
}

// ShowAccessRequestMultiError is an error wrapping multiple validation errors
// returned by ShowAccessRequest.ValidateAll() if the designated constraints
// aren't met.
type ShowAccessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShowAccessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShowAccessRequestMultiError) AllErrors() []error { return m }

// ShowAccessRequestValidationError is the validation error returned by
// ShowAccessRequest.Validate if the designated constraints aren't met.
type ShowAccessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShowAccessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShowAccessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShowAccessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShowAccessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShowAccessRequestValidationError) ErrorName() string {
	return "ShowAccessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShowAccessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShowAccessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShowAccessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShowAccessRequestValidationError{}
